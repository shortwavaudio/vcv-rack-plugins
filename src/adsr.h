
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ADSR_H
#define ADSR_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "util.h"

// typedef struct Util__ctx_type_0 {
//    uint8_t pre;
// } Util__ctx_type_0;

// typedef Util__ctx_type_0 Util_edge_type;

// static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
//    Util__ctx_type_0 _ctx;
//    _ctx.pre = false;
//    _output_ = _ctx;
//    return ;
// }

// static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
//    Util__ctx_type_0_init(_output_);
//    return ;
// }

// static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
//    uint8_t ret;
//    ret = (x && bool_not(_ctx.pre));
//    _ctx.pre = x;
//    return ret;
// }

// typedef struct Util__ctx_type_1 {
//    float pre_x;
// } Util__ctx_type_1;

// typedef Util__ctx_type_1 Util_change_type;

// static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
//    Util__ctx_type_1 _ctx;
//    _ctx.pre_x = 0.0f;
//    _output_ = _ctx;
//    return ;
// }

// static_inline void Util_change_init(Util__ctx_type_1 &_output_){
//    Util__ctx_type_1_init(_output_);
//    return ;
// }

// static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
//    uint8_t v;
//    v = (_ctx.pre_x != x);
//    _ctx.pre_x = x;
//    return v;
// }

// static_inline float Util_map(float x, float x0, float x1, float y0, float y1){
//    return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
// };

// typedef struct Util__ctx_type_3 {
//    float y1;
//    float x1;
// } Util__ctx_type_3;

// typedef Util__ctx_type_3 Util_dcblock_type;

// void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

// static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
//    Util__ctx_type_3_init(_output_);
//    return ;
// }

// float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

// typedef struct Util__ctx_type_4 {
//    float x;
// } Util__ctx_type_4;

// typedef Util__ctx_type_4 Util_smooth_type;

// static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
//    Util__ctx_type_4 _ctx;
//    _ctx.x = 0.0f;
//    _output_ = _ctx;
//    return ;
// }

// static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
//    Util__ctx_type_4_init(_output_);
//    return ;
// }

// static_inline float Util_smooth(Util__ctx_type_4 &_ctx, float input){
//    _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
//    return _ctx.x;
// }

// typedef struct Util__ctx_type_5 {
//    float x0;
// } Util__ctx_type_5;

// typedef Util__ctx_type_5 Util_average2_type;

// static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
//    Util__ctx_type_5 _ctx;
//    _ctx.x0 = 0.0f;
//    _output_ = _ctx;
//    return ;
// }

// static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
//    Util__ctx_type_5_init(_output_);
//    return ;
// }

// static_inline float Util_average2(Util__ctx_type_5 &_ctx, float x1){
//    float result;
//    result = (0.5f * (_ctx.x0 + x1));
//    _ctx.x0 = x1;
//    return result;
// }

// static_inline float Util_cubic_clipper(float x){
//    if(x <= -0.666666666667f){
//       return -0.666666666667f;
//    }
//    else
//    {
//       if(x >= 0.666666666667f){
//          return 0.666666666667f;
//       }
//       else
//       {
//          return (x + (-0.333333333333f * x * x * x));
//       }
//    }
// };

// static_inline float Util_pitchToRate_1024_raw_c0(int index){
//    return Util_pitchToRate_1024_c0[index];
// };

// static_inline float Util_pitchToRate_1024_raw_c1(int index){
//    return Util_pitchToRate_1024_c1[index];
// };

// static_inline float Util_pitchToRate_1024_raw_c2(int index){
//    return Util_pitchToRate_1024_c2[index];
// };

// static_inline float Util_pitchToRate_1024(float pitch){
//    int index;
//    index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
//    return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
// }

// static_inline float Util_pitchToRate_raw_c0(int index){
//    return Util_pitchToRate_c0[index];
// };

// static_inline float Util_pitchToRate_raw_c1(int index){
//    return Util_pitchToRate_c1[index];
// };

// static_inline float Util_pitchToRate_raw_c2(int index){
//    return Util_pitchToRate_c2[index];
// };

// static_inline float Util_pitchToRate(float pitch){
//    int index;
//    index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
//    return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
// }

// static_inline float Util_cvToPitch(float cv){
//    return (24.f + (120.f * cv));
// };

// static_inline float Util_cvToRate_1024_raw_c0(int index){
//    return Util_cvToRate_1024_c0[index];
// };

// static_inline float Util_cvToRate_1024_raw_c1(int index){
//    return Util_cvToRate_1024_c1[index];
// };

// static_inline float Util_cvToRate_1024_raw_c2(int index){
//    return Util_cvToRate_1024_c2[index];
// };

// static_inline float Util_cvToRate_1024(float cv){
//    int index;
//    index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
//    return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
// }

// static_inline float Util_cvToRate_raw_c0(int index){
//    return Util_cvToRate_c0[index];
// };

// static_inline float Util_cvToRate_raw_c1(int index){
//    return Util_cvToRate_c1[index];
// };

// static_inline float Util_cvToRate_raw_c2(int index){
//    return Util_cvToRate_c2[index];
// };

// static_inline float Util_cvToRate(float cv){
//    int index;
//    index = int_clip(float_to_int((141.111111111f * cv)),0,127);
//    return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
// }

// static_inline float Util_pitchToCv(float pitch){
//    return (0.00833333333333f * (-24.f + pitch));
// };

// static_inline float Util_cvToperiod_raw_c0(int index){
//    return Util_cvToperiod_c0[index];
// };

// static_inline float Util_cvToperiod_raw_c1(int index){
//    return Util_cvToperiod_c1[index];
// };

// static_inline float Util_cvToperiod_raw_c2(int index){
//    return Util_cvToperiod_c2[index];
// };

// static_inline float Util_cvToperiod(float cv){
//    int index;
//    index = int_clip(float_to_int((31.f * cv)),0,31);
//    return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
// }

// static_inline float Util_cvTokHz_raw_c0(int index){
//    return Util_cvTokHz_c0[index];
// };

// static_inline float Util_cvTokHz_raw_c1(int index){
//    return Util_cvTokHz_c1[index];
// };

// static_inline float Util_cvTokHz_raw_c2(int index){
//    return Util_cvTokHz_c2[index];
// };

// static_inline float Util_cvTokHz(float cv){
//    int index;
//    index = int_clip(float_to_int((31.f * cv)),0,31);
//    return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
// }

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst955;
   Util__ctx_type_0 _inst251;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

static_inline void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst16;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

static_inline void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate){
   return Adsr_do(_ctx._inst16,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
};

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

static_inline void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

static_inline void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

static_inline void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

static_inline void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 1.f;
   _ctx.knob4 = 0.5f;
}



#endif // ADSR_H
