
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sawcore.h"

void Sawcore__ctx_type_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0 _ctx;
   _ctx.ptr_w2_ret_1 = 0.0f;
   _ctx.ptr_w2_ret_0 = false;
   _output_ = _ctx;
   return ;
}

void Sawcore_ptr_w2(Sawcore__ctx_type_0 &_ctx, float phase, float rate){
   _tuple___bool_real__ out;
   float s1;
   s1 = rate;
   float s2;
   s2 = (rate + s1);
   if(phase < s1){
      float d;
      d = (phase / rate);
      float t2;
      t2 = (0.0009765625f * s2);
      {
         out.field_0 = false;
         out.field_1 = (1.f + (d * (t2 + (- d))));
      }
   }
   else
   {
      if(phase < s2){
         float d;
         d = (phase / rate);
         float t2;
         t2 = (0.0009765625f * s2);
         {
            out.field_0 = false;
            out.field_1 = (3.f + (d * (-4.f + d + t2)));
         }
      }
      else
      {
         out.field_0 = true;
         out.field_1 = 0.0f;
      }
   }
   _ctx.ptr_w2_ret_0 = out.field_0;_ctx.ptr_w2_ret_1 = out.field_1;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Sawcore__ctx_type_0_init(_ctx._inst622);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset){
   float transition;
   transition = 0.0f;
   float out;
   out = 0.0f;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst351,(reset > 0.0f));
   uint8_t do_wrap;
   do_wrap = (new_phase > 1024.f);
   if(do_reset || do_wrap){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){
         new_phase = (-1024.f + new_phase);
      }
      else
      {
         new_phase = 0.0f;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      float ptr;
      Sawcore_ptr_w2(_ctx._inst622,_ctx.phase,_ctx.rate);
      done = Sawcore_ptr_w2_ret_0(_ctx._inst622);
      ptr = Sawcore_ptr_w2_ret_1(_ctx._inst622);
      transition = (0.5f * _ctx.reset_phase * (1.f + ptr));
      if(done){
         _ctx.reset_state = false;
      }
      else
      {
         out = transition;
      }
   }
   return (-1.f + (0.001953125f * out));
}


